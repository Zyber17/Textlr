#!/usr/bin/env node

/**
 * Module dependencies.
 */

var cluster = require('cluster');
var app = require('../app');
var debug = require('debug')('Textlr:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 8000);
app.set('port', port);

/**
 * Create HTTP server.
 */

if (cluster.isMaster) {
	console.log("Textlr running in a " + (process.env.NODE_ENV ? '`' + process.env.NODE_ENV + '`' : 'production') + " environment.");

	var cpus = require('os').cpus().length;
	for (var i = 0; i < cpus; i++) {
		cluster.fork();
	}
	cluster.on('exit', function(worker) {
		console.log("Worker " + worker.id + " died :(");
		return cluster.fork();
	});
} else {
	var server = http.createServer(app);

	/**
	 * Listen on provided port, on all network interfaces.
	 */

	server.listen(port);
	server.on('error', onError);
	server.on('listening', onListening);

	/**
	 * Event listener for HTTP server "error" event.
	 */

	function onError(error) {
		if (error.syscall !== 'listen') {
			throw error;
		}

		var bind = typeof port === 'string'
			? 'Pipe ' + port
			: 'Port ' + port;

		// handle specific listen errors with friendly messages
		switch (error.code) {
			case 'EACCES':
				console.error(bind + ' requires elevated privileges');
				process.exit(1);
				break;
			case 'EADDRINUSE':
				console.error(bind + ' is already in use');
				process.exit(1);
				break;
			default:
				throw error;
		}
	}

	/**
	 * Event listener for HTTP server "listening" event.
	 */

	function onListening() {
		var addr = server.address();
		var bind = typeof addr === 'string'
			? 'pipe ' + addr
			: 'port ' + addr.port;
		debug('Listening on ' + bind);
	}

	console.log("Worker " + cluster.worker.id + " running!");
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val);

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}
