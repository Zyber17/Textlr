{
  "author": {
    "name": "Trevor Burnham",
    "url": "http://trevorburnham.com"
  },
  "name": "connect-file-cache",
  "description": "A Connect middleware for mapping routes to memory",
  "version": "0.2.5",
  "engines": {
    "node": ">=0.6.1"
  },
  "homepage": "http://github.com/TrevorBurnham/connect-file-cache",
  "repository": {
    "type": "git",
    "url": "git://github.com/TrevorBurnham/connect-file-cache.git"
  },
  "main": "lib/cache.js",
  "dependencies": {
    "mime": "1.2.2",
    "underscore": "1.1.7"
  },
  "devDependencies": {
    "coffee-script": "1.1.2",
    "connect": "1.6.4",
    "nodeunit": "0.5.4",
    "request": "2.1.1",
    "watch-tree": "0.1.1"
  },
  "readme": "# connect-file-cache\n\nA static cache middleware for [Connect](http://senchalabs.github.com/connect/) spun off from [connect-assets](http://github.com/TrevorBurnham/connect-assets). Written in [CoffeeScript](http://coffeescript.org) by the author of [CoffeeScript: Accelerated JavaScript Development](http://pragprog.com/book/tbcoffee/coffeescript).\n\n## Why connect-file-cache?\n\nIf you're just serving files, Connect's own [static](http://senchalabs.github.com/connect/middleware-static.html) (possibly with [staticCache](http://senchalabs.github.com/connect/middleware-staticCache.html) on top) is quite sufficient. But suppose you want to serve, say, compiled and minified CoffeeScript with a far-future expires header, and you want multiple routes to be able to point at that same file (say, one with an MD5 suffix for disambiguation, and one without).\n\nThat's the use case connect-file-cache was born out of. It's designed to be very fast. The \"files\" it serves don't have to exist on disk at all. On the other hand, it's not suitable for serving large files (or many), because *all files are stored in memory.*\n\n**Bonus:** connect-file-cache also does gzip (when requested)!\n\n## How do I use it?\n\nInstall:\n\n    npm install connect-file-cache\n\nThen in your app:\n\n    connectCache = require 'connect-file-cache'\n    cache = connectCache options\n    app.use cache.middleware\n\nwhere `options` is a hash that may include\n\n* `src`: A dir containing files to be served directly (defaults to `null`)\n* `routePrefix`: Data will be served from this path (defaults to `/`)\n\nYou can map routes directly to strings like so:\n\n    cache.set 'foo/bar.txt', 'str'\n\nThen go to `yourapp/foo/bar.txt` in your browser.\n\n## Additional Features\n\nYou can map multiple routes by passing in an array as the first argument:\n\n    cache.set ['foo/bar.txt', 'foo/baz.txt'], 'str'\n\nAnd if you want the browser to download the file rather than trying to display it, set the `attachment` flag to `true`:\n\n    cache.set 'foo/bar.txt', 'str', attachment: true\n\nBy default, MIME types are automatically inferred from file extensions. But you can override this with the `mime` option:\n\n    cache.set 'foo/bar.txt', 'str', mime: 'html'\n\nTo support browser-side caching, connect-file-cache handles \"If-Modified-Since\" requests. But to prevent even those few milliseconds of extra latency, you can set `expires` to `false`—meaning that the browser will never download the file again (from the same route):\n\n    cache.set 'foo/bar.txt', 'str', expires: false\n\nFor more advanced examples, check the `test` folder.\n\n## Credits\n\nThoroughly inspired by Connect's [static](https://github.com/senchalabs/connect/blob/1.6.4/lib/middleware/static.js) middleware.\n\n## License\n\n©2011 Trevor Burnham and available under the [MIT license](http://www.opensource.org/licenses/mit-license.php):\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.mdown",
  "bugs": {
    "url": "https://github.com/TrevorBurnham/connect-file-cache/issues"
  },
  "_id": "connect-file-cache@0.2.5",
  "_from": "connect-file-cache@0.2.5"
}
